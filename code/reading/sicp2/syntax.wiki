%title Scheme基础语法

[[../../../index|首页]] - [[../../index|Code]] - [[../index|Reading]] - [[index|SICP2]]
==Scheme基础语法==
----
===语言概述===

* 注释：以 `;` 开始，直到行尾
* 字符：`#\字符`。如 `#\a`
* 字符串：`"字符串"`。如 `"Ruchee"`
* 布尔值：`#t` 和 `#f`，事实上，`Scheme` 中唯一为假的值为 `#f`，其他都为真
----
===常用符号===

* `'`：`quote` 的简写，阻止子表达式的解析。如 `'(+ 1 2 3) => (+ 1 2 3)`
----
===列表===

列表可包含任意数据类型的元素，可任意嵌套

列表处理函数：
* `car`：取列表的第一个元素。如 `(car '(a b c)) => a`
* `cdr`：取列表除第一个元素外剩余的部分。如 `(cdr '(a b c)) => (b c)`
* `cons`：接受两个参数，然后将第一个参数插入第二个参数的最前面，组成一个序对或列表。如 `(cons 'a '(b c)) => (a b c)`
* `list`：接受任意个参数，然后将各个参数当成元素组成一个列表。如 `(list 'a '(b c)) => (a (b c))`
----
===流程控制===

判断语句：
{{{
(if (条件)
  满足时执行
  不满足时执行)
}}}
----
===变量和函数===

变量定义/无参函数：
{{{
(define 变量名/函数名
  变量值/函数体)
}}}

有参函数：
{{{
(define (函数名 参数表列)
  函数体)
}}}

匿名函数：
{{{
(lambda (参数表列)
  函数体)
}}}
----
===命名规范===

# 带有测试功用的函数以 `?` 结尾，如 `eq?`
# 带有副作用的函数以 `!` 结尾，如 `set!`
# 处理指定数据类型的函数以 `数据类型-` 作前缀，如 `char-`、`string-`、`vector-`
# 类型转换函数以 `->` 连接，如 `vector->list`
----
<red>date</red> : 2013-07-24
----
