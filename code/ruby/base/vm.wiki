%title Ruby虚拟机

[[../../../index|首页]] - [[../index|Ruby]] - [[index|Base]]
==Ruby虚拟机==
----
从`Ruby 1.9`开始，`Ruby`解释器采用的是和`JVM`一样的架构，同样是编译成字节码再执行，所以`Ruby`解释器也可称为`Ruby`虚拟机
----
===常用选项===

# `-w`：对废弃代码或问题代码给出警告，同时设置`$VERBOSE`为`true`
# `-e`：直接运行`Ruby`代码，这借鉴自`Perl`，可以同时使用多个`-e`选项。如 `ruby -e "print 'Hello, '" -e "puts 'Ruchee'"`
# `-c`：解析程序并报告语法错误，但并不运行这个程序
# `-I`：指定库的搜索路径，这和`GCC`类似，可以同时使用多个`-I`选项，每个选项也可以同时指定多个路径。`Linux/Unix`多个目录的分隔符为`“:”`，`Windows`多个目录的分隔符为`“;”`
# `-r`：加载指定的`library`，相当于`GCC`的`-l`选项
# `-K`：以简写形式指定编码，`a`、`A`、`n`、`N`表示`ASCII`，`u`、`U`表示`Unicode`
# `-E`：以全名形式指定编码，如 `-E utf-8`
----
===系统信息===

使用以下代码可以检测`Ruby`虚拟机启动时加载的模块、类、异常类：
{{{Ruby
<pre class='brush: ruby'>
#!/usr/bin/env ruby
# encoding: utf-8

print "模块：", "\n\n"
puts Module.constants.sort.select {|x|
  eval(x.to_s).instance_of? Module
}
puts

print "类：", "\n\n"
puts Module.constants.sort.select {|x|
  c = eval(x.to_s)
  c.is_a? Class and not c.ancestors.include? Exception
}
puts

print "异常类：", "\n\n"
puts Module.constants.sort.select {|x|
  c = eval(x.to_s)
  c.instance_of? Class and c.ancestors.include? Exception
}
</pre>
}}}


使用以下代码获取`Ruby`虚拟机预定义的全局变量列表：
{{{Ruby
<pre class='brush: ruby'>
#!/usr/bin/env ruby
# encoding: utf-8

puts global_variables.sort
</pre>
}}}
----
<red>date</red> : 2012-04-03、2012-04-04
----
