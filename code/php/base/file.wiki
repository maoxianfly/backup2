%title 文件操作

[[../../../index|首页]] - [[../index|PHP]] - [[index|Base]]
==文件操作==
----
===打开文件===

函数：`fopen("文件路径", '打开方式')`

文件路径可以引用系统全局变量`$_SERVER['DOCUMENT_ROOT']`来进行相对路径的书写，该变量指代的是服务器文档树的根目录

文件的打开方式有以下几种

# `r`：只读，从文件头部开始读
# `w`：只写，如果文件已存在则清空原文件的所有内容，如果不存在则新建一个文件
# `a`：追加，如果文件已存在则在文件末尾追加写入，不存在则新建
# `x`：谨慎写，如果文件已存在，`fopen()`将返回`false`，文件不会被打开，且`PHP`将产生一个警告
# `b`：二进制，`Windows`区分二进制和文本，而`Unix`不区分，最好是一直使用这个选项，以获得最大程度的可移植性
# `t`：文本，只用于`Windows`，不推荐使用
# `r+`、`w+`、`a+`、`x+`都代表采用读写模式

`fopen()`还有可选的第三个和第四个参数，但不常用
----
===写文件===

函数：`fwrite()`，别名`fputs()`

`fwrite()`接受两个必须的参数和可选的第三个参数，第一个参数是要写入的文件指针，第二个参数是要写入的内容

第三个参数可以指定本次写入的最大字符数，一旦写到了字符串末尾或者已写字符数达到了第三个参数的大小，写入操作就会停止

如果选用第三个参数，通常使用函数`strlen()`来获取字符串的长度，这在以`二进制`模式执行写操作时可以避免一些跨平台的兼容性问题
----
===读文件===

函数：`fgets(文件指针, 可以读取的最大长度+1)`

`fgets()`函数会不断读入字符，直到遇到`\n`、`EOF`或读取字符达到了第二个参数的限定值时才会结束

变体函数1：`fgetss(文件指针, 可以读取的最大长度+1, 需要过滤的特殊标记)`

`fgetss()`函数默认会过滤文件中的`PHP`和`HTML`标记，如果还需要过滤其他特殊标记，可以将这些标记作为第三个参数传入

变体函数2：`fgetcsv(文件指针, 可以读取的最大长度+1, 断行标记, 每个域的封闭字符)`

`fgetcsv()`的作用是按指定的`断行标记`将读取到的文本在`断行标记`处断开为新的一行，第四个参数可选，默认为双引号（`"`）

`fgetcsv()`操作成功将返回一个数组

函数：`readfile("文件路径", 其他可选参数)`

`readfile()`函数包含了所有的文件操作，它会打开目标文件，然后将文件内容整个打印到标准输出，最后再关闭这个文件

函数：`file("文件路径", 其他可选参数)`

`file()`与`readfile()`使用方法一样，只是`file()`会将文本内容返回到一个数组

函数：`fgetc(文件指针)`

`fgetc()`每次读取一个字符，其缺点是不会跳过`EOF`，需要编码判断文件结尾，这种逐个读取字符的方法现实意义不大

函数：`fread(文件指针, 字节数)`

`fread()`可以自定义读取任意字节数的字符串，只有当文件指针到达文件结尾或读取的字节数达到限定值时才会结束
----
===关闭文件===

函数：`fclose(文件指针)`

关闭成功会返回`true`，失败返回`false`，由于关闭文件一般不会出错，所以对关闭操作进行测试没多大必要
----
===文件定位===

函数：`rewind(文件指针)`

`rewind()`函数可以将文件指针复位到文件的开始位置

函数：`ftell(文件指针)`

`ftell()`函数将以字节为单位返回文件指针在当前文件的位置

函数：`fseek(文件指针, 移动的字节数, 移动的起始位置)`

`fseek()`可以灵活移动文件指针，第三个参数可选，默认为`SEEK_SET`（文件开始），也可以设为`SEEK_CUR`（当前位置）或`SEEK_END`（文件结尾）
----
===文件的锁定===

函数：`flock(文件指针, 加锁方式, 可选的第三个参数)`

`flock()`可以对文件进行锁定，以防多个用户同时操作造成数据不一致

可选的加锁方法有以下几种

# `LOCK_SH`：读操作锁定，其他用户依然可以读该文件
# `LOCK_EX`：写操作锁定，其他用户不允许对该文件进行任何操作
# `LOCK_UN`：释放锁定
# `LOCK_NB`：防止在请求加锁时发生阻塞
----
===检测文件是否存在===

函数：`file_exists("文件路径")`

该函数可以检测文件或目录是否存在
----
===检测文件结尾===

函数：`feof(文件指针)`

`feof`即`File End Of File`，如果文件指针指向了文件末尾，该函数就返回`true`，否则返回`false`
----
===计算文件大小===

函数：`filesize("文件路径")`

以`字节`为单位返回文件的大小，可以结合`fread()`一次读取整个文件
----
===删除一个文件===

函数：`unlink("文件路径")`

如果因为没有权限等原因无法删除文件，该函数就会返回`false`。注意，`PHP`没有叫`delete()`的函数
----
<red>date</red> : 2012-06-15、2012-06-17
----
