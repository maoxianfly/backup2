%title 面向对象编程

[[../../../index|首页]] - [[../index|PHP]] - [[index|Base]]
==面向对象编程==
----
===基本概念===

类的实例化语法：`$obj = new cl_name(构造函数参数列表)`

`PHP`有一个特殊的指针`$this`，用来在类的内部访问该类的属性，如 `$this->name = $getName`（注意，`->`后面的属性名不需要带美元符）
----
===内置成员函数===

# `__construct()`：构造函数
# `__destruct()`：析构函数，不允许带参数
# `__clone()`：对象克隆
# `__toString()`：将类转换成字符串
----
===访问权限===

其他很多面向对象语言的默认访问权限是`private`，但`PHP`默认为`public`

至于`protected`与`private`的用法，`PHP`与其他面向对象语言没什么区别
----
===继承===

`PHP`的继承关键字是`extends`，如 `class B extends A { ... }`

父类的属性和方法在子类中访问权限的变化

# `public` -> `public`
# `protected` -> `protected`
# `private` -> 不能被继承

`PHP`的面向对象毕竟是后面才加入的，很多有用的东西都还没有，显得很残缺，比如`继承`直接就一个`public`继承，没有`protected`和`private`继承

子类可以重写父类已有的属性和方法，如果需要引用父类属性或方法，使用关键字`parent`，如 `parent::getName()`

关键字`final`的作用：将`final`添加到类定义的前面，则该类不允许被继承；将`final`添加到方法定义的前面，则该方法不允许被重载

注意，`final`只能用于类定义和方法定义，不能用于类的属性

和`Java`一样，`PHP`使用接口代替多重继承，使用方法也一样，使用的关键字是`interface`和`implements`
----
===面向对象高级特性===

可以在类里面使用关键字`const`定义常量，然后就可以直接通过类名引用该常量了，如 `类名::常量名`

还可以在类里面使用关键字`static`定义静态方法，这样的方法可以直接通过类名来调用，如 `类名::静态方法名()`

需要注意的是，静态方法中不允许使用`$this`指针
----
<red>date</red> : 2012-06-22、2012-06-23、2012-09-06
----
