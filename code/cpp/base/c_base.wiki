%title C基础拾遗

[[../../../index|首页]] - [[../index|C++]] - [[index|Base]]
==C基础拾遗==
----
===printf格式符===

* `%d`：以十进制形式输出带符号整数（正数不输出符号），也可以写成`%i`
* `%c`：输出单个字符
* `%f`：以小数形式输出单、双精度浮点数，如 `%3.0f`表示不带小数点和小数位，`%3.1f`表示带一位小数
* `%e`：以指数形式输出单、双精度浮点数（输出小写`e`）
* `%E`：作用同`%e`，但输出的是大写`E`
* `%g`：从`%f`和`%e`中选宽度最短的输出单、双精度浮点数
* `%G`：作用同`%g`，但如果输出结果为指数形式，则使用大写`E`
* `%s`：输出字符串
* `%o`：以八进制形式输出无符号整数（不输出前缀`0`）
* `%x`：以十六进制形式输出无符号整数（不输出前缀`0x`）
* `%X`：作用同`%x`，但使用`A`、`B`、`C`、`D`、`E`、`F`等大写字母
* `%u`：以十进制形式输出无符号整数
* `%p`：输出地址数据（指针类型）
* `%z`：这是`C99`专门为`sizeof`操作符提供的格式说明符
* `%h`：按短整型量输出，`%hh`表示`signed char`或`unsigned char`
* `%l`：按长整型量输出，`%ll`表示`long long int`或`unsigned long long int`
* `%%`：输出百分号本身
* `-`：输出结果左对齐，右边以空格填充（默认是右对齐，左边填空格）
* `+`：对输出结果添加正负号
* `#`：对于八进制和十六进制数据，输出前缀符号`0`和`0x`，同时对于`%g`、`%G`格式符，还能保证一定输出小数点
* `空格`：有符号的值若为正，则显示前导空格（不会显示符号）；若为负，则带上负号
----
===scanf格式符===

* `%d`：输入十进制整数
* `%c`：输入单个字符
* `%f`：输入浮点数（包括小数形式和指数形式），也可以写成`%e`
* `%s`：输入字符串
* `%o`：输入八进制整数
* `%x`：输入十六进制整数
* `%u`：输入无符号十进制整数
* `*`：将当前格式符所对应的输入数据及这个格式符本身忽略掉，转而处理下一个格式符和下一个输入数据
* `h`：按短整型量获取输入
* `l`：按长整型量获取输入
* `整数`：按指定宽度截取输入值，要注意的是只允许截取，不允许进行精度控制，也就是说这个数字不能是小数
----
===注释===

对于注释的处理，`C`标准规定，必须使用一个空格来进行替换，所以，`a/*xxx*/b`将预处理成`a b`，而不是`ab`

多行注释`/**/`不能嵌套使用，如需嵌套，应在内层使用单行注释`//`（`C99`支持）
----
===变量===

`float`型可以存储小数，但进行算术运算时通常比`int`型慢，而且其所存储的数值往往只是实际数值的一个近似值

在将一个小数赋值给`float`型变量时，最好在该数值的后面加上一个小写的`f`，如：`float a = 3.14f`（但给`double`型变量赋小数不需要加后缀）

旧`C`标准要求变量声明必须放在所有语句之前，`C99`没有了这个限制（`GCC`在不开`C99`选项的情况下默认可以正常编译，但`VC6`、`VS2008`和`VS2012`均不支持）
----
===输入输出常用函数===

* `getchar`：从标准输入流获取一个字符并返回，返回`int`型。`char ch = getchar();`
* `putchar`：向标准输出流输出一个字符并返回该字符的`int`值。`putchar(ch);`
* `fprintf`：向预定义流输出格式化字符串，第一个参数为流的名字，写成`stdout`就相当于`printf`。`fprintf(stdout, "%s, 你好", name);`
* `sprintf`：向指定的字符串缓冲区输出格式化内容，第一个参数为缓冲区的名字。`sprintf(buffer, "$s, 你好", name);`

`fprintf`和`sprintf`的返回值都是输出字符的个数，但两者存在细微的差别
----
===字符串相关函数===

* `gets`：从标准输入流获取一个字符串，成功返回该字符串，失败返回`NULL`。`char str[10]; gets(str);`
* `puts`：向标准输出流输出字符串，自带换行，失败返回`EOF`。`char str[] = "Ruchee"; puts(str);`
* `strcat`：字符串连接函数，将字符串`2`连接到字符串`1`的后面，返回字符串`1`的首地址，需要包含`string.h`。`strcat(str1, str2);`
* `strcpy`：字符串拷贝函数，将字符串或常量拷贝到字符数组`1`中，返回字符数组`1`的首地址，需要包含`string.h`。`strcpy(str1, str2);`
* `strcmp`：字符串比较函数，等于返回`0`，前大于后返回非负值，前小于后返回负值，需要包含`string.h`。`strcmp(str1, str2);`
* `strlen`：字符串长度统计函数，不包括结束标志`\0`，需要包含`string.h`。`int len = strlen(str);`

| <center>`strlen`与`sizeof`辨异</center>                                  |
| `strlen`是函数，统计的字符数不包括字符串结束标志                         |
| `sizeof`是运算符，不是函数，统计的字符串包括了字符串结束标志             |
| 对于`char str[10] = "Ruchee"`，`strlen(str) == 6`，而`sizeof(str) == 10` |
----
<red>date</red> : 2012-01-04、2012-01-29、2012-02-14、2012-07-26、2012-09-05、2012-09-09、2012-10-07合并整理
----
