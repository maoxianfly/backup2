%title Java易错点

[[../../../index|首页]] - [[../index|Java]] - [[index|JavaSE]]
==Java易错点==
----
===整数运算陷阱===

计算`70 * 60 * 24 * 365 * 70`的结果，计算语句该怎么写？

很容易理所当然写成`int sum = 70 * 60 * 24 * 365 * 70;`，结果呢？数据溢出，得到的是一个负数

那写成`long sum = 70 * 60 * 24 * 365 * 70;`总行了吧？还是溢出，因为在计算完连乘以后数据就已经溢出了，转`long`也无济于事

再写成`long sum = 70 * 60 * 24 * 365 * 70 * 1L;`主动转`long`，这该行了吧？结果还是溢出，因为在计算`1L`之前就已经溢出了

正确的写法是：`long sum = 70L * 60 * 24 * 365 * 70;`，将`long`类型的数字放在计算的最前面，这样就确保一开始就能转换成`long`型
----
===浮点数陷阱===

浮点数是永远不会是绝对精确的，不要用浮点数进行相等性比较，也不要与其他数据类型进行混合比较

不要在数量级相差太大的浮点数之间进行加减运算，这很可能出现“`大数吃小数`”的现象

要精确处理大数据，应该使用`Java`提供的`BigInteger`和`BigDecimal`，只是运算速度不如基本类型，这两个类位于`java.math`包中

在使用上述两个类构造大数据时，应该传入字符串类型，而不是直接的数字类型，因为直接使用数字会出现精度问题<br>
`BigDecimal bigNum = new BigDecimal("0.3");`
----
===运算符陷阱===

`i = i++`等价于这三条语句：`int temp = i;`、`i = i + 1;`、`i = temp;`

所以如果`i`初始值为`1`，执行完`i = i++;`后，`i`的值仍然为`1`

而如果是执行`i = ++i;`，则`i`的值会变成`2`，因为`i = ++i;`等价于`i = i + 1;`、`int temp = i;`、`i = temp;`

对于`arr[++i] = i;`这样的问题，`Java`是先计算出数组下标，然后再从式子的最右端往最左端计算

而`C/C++`则是一律从最右端往最左端算起，所以如果`i`初值为`1`，则`Java`得到的结果是`arr[2] = 2`，`C/C++`得到的结果是`arr[1] = 1;`

与`NaN`进行任何运算结果都为`NaN`，`NaN`也不等于任何值，包括其自身
----
===移位运算符认识误区===

对于左移（`<<`）、右移（`>>`），一般认为左移一位相当于乘以`2`，右移一位相当于除以`2`，但这事实上是错误的

对于正数而言，左移一位相当于乘以`2`，右移一位相当于除以`2`，这个成立

对于负数，左移一位确实是相当于乘以`2`，但并非所有的负数右移一位都相当于除以`2`
----
===循环问题===

`CPU`在循环内外层切换时会有一定的开销，为减少开销，提高性能，在写嵌套的循环语句时，应尽可能把循环次数多的放内层

如果循环中需要用到某个保持不变的值，那就应该先计算出来再使用，而且不能对后续代码造成影响
{{{Java
// 不推荐写法一，每次循环都得求一次值
for(int i = 0; i < upperLimit(); ++i){
	doSomething();
}

// 不推荐写法二，upper的值有可能会被循环后的其他语句误引用
int upper = upperLimit();
for(int i = 0; i < upper; ++i){
	doSomething();
}

// 最佳写法
for(int i = 0, upper = upperLimit(); i < upper; ++i){
	doSomething();
}
}}}

如果循环次数比较多，那就要把性能看在首位，如果循环次数少，则可以首先考虑可读性
{{{Java
// 可读性好，但对大循环效率不高
for( ... ){
	if( ... ){
		doSomething();
	}
	else{
		doSomething2();
	}
}

// 可读性差，但对大循环效率较高
if( ... ){
	for( ... ){
		doSomething();
	}
}
else{
	for( ... ){
		doSomething2();
	}
}
}}}

应该优先使用`for/in`循环取代`迭代器`的写法
----
<red>date</red> : 2012-02-21、2012-02-23、2012-02-25
----
