%title PHP基本语法

[[../../../index|首页]] - [[../index|Web]] - [[index|PHP]]
==PHP基本语法==
----
===变量与标识符===

`PHP`的标识符区分大小写，但函数名例外

变量名可以与函数名相同，且变量无需声明，当第一次给一个变量赋值时，这才创建了这个变量

`PHP`的变量没有既定的数据类型，其类型由其值决定

`PHP`支持静态变量，使用关键字`static`

一个很特殊的地方，`PHP`支持一个叫`变量的变量`的概念，也叫`可变变量`，如 `$a = "b"; $$a = "BB"; echo "${$a} $b";`输出结果将为`BB BB`

可以使用`define`函数定义常量，常量名一般使用大写，常量名前面不需要`美元符`，如 `define('NUM', 100);`

常量与变量的差异，除了常量名不需要带`美元符`以外，常量本身也只允许保存`布尔值`、`整数`、`浮点数`和`字符串`数据
----
===基本数据类型===

# `布尔型`：值为`true`或`false`，不区分大小写（考虑到`JavaScript`是全小写的，所以最好是一直使用全小写的形式）
# `整型`：支持`C语言`的八进制、十六进制写法
# `浮点型`：支持使用科学计数法表示
# `字符串`：使用单引号或双引号界定，字符串可以直接被当成数组进行单个元素的索引，只有双引号字符串才支持变量内插以及更丰富的转义字符
# `数组`：数字索引与键值对并存
# `对象`：保存类的实例
# `空`：没有被赋值、已经被重置、被显式赋值为`NULL`的变量就属于`NULL`数据类型
# `资源`：特定的内置函数，如数据库函数返回的就是`resource`类型的变量，资源变量不能直接操作，通常由函数返回并作为参数传递给其他函数

`PHP`允许在双引号字符串中使用大括号对变量进行界定，以应付较为复杂的变量内插，如 `echo "My Email is {$mails['ruchee']}.";`

此外`PHP`还支持一种称为`heredoc`的语法，可以跨行书写长文本，解析方式与双引号字符串一样，同样支持变量内插，示例如下：
{{{PHP
<pre class="brush: php">
$output = <<<HEREDOC  // HEREDOC这个名称可以随意取
This is a heredoc example
My name is $name
My email is $email
HEREDOC;  // 需要确保以同样的名称结尾，而且必须顶行，前面不能有空格或其他字符
</pre>
}}}
----
===数据类型的强制转换===

# `(bool)`或`(boolean)`：转换为布尔型
# `(int)`或`(integer)`：转换为整数
# `(float)`或`(double)`或`(real)`：转换为浮点数
# `(string)`：转换为字符串
# `(array)`：转换为数组
# `(object)`：转换为对象

`PHP`还会在进行`数值计算`或`字符串拼接`时自动完成部分数据类型的转换，这些自动转换都是符合常规逻辑的，极容易识别
----
===全局数组===

# `$_GET`：保存表单以`GET`方法提交的变量，可以通过形如`$_GET['name']`的方式访问
# `$_POST`：保存表单以`POST`方法提交的变量，可以通过形如`$_POST['name']`的方式访问
# `$_REQUEST`：不论表单以何种形式提交，其变量都将保存到该全局数组，也就是说，可以通过形如`$_REQUEST['name']`的方式访问到
----
===变量作用域===

# 内置的超全局变量在脚本的任何地方都可见
# 常量一旦被声明也将全局可见
# 在一个脚本中声明的全局变量在整个脚本可见
# 在函数内部声明的静态变量只在函数内部可以访问

引用全局变量的两个方法：使用`global`关键字或`$GLOBALS`全局数组，如 `global $name`或`$GLOBALS["name"]`
----
===操作符===

除支持所有常规运算符以外，还支持特有的字符串连接符（点号`.`）

支持所有常见的复合操作符，此外还有一个`.=`

支持自增（`++`）、自减（`--`）操作符

支持三元操作符（`? :`）

`PHP`支持特殊的恒等（`===`）、不恒等（`!==`）和不等（`<>`）操作符

支持的逻辑操作符有：`&&`、`||`、`!`、`and`、`or`、`xor`（异或），注意，没有`not`

支持的位操作符有：`&`、`|`、`~`（按位非）、`^`（按位异或）、`<<`（向左位移）、`>>`（向右位移），但位操作符在`PHP`中并不常用

`PHP`还支持引用，这个就强大了，引用符用的是`&`，可以使用函数`unset()`断开引用（`unset`本质是销毁变量）

独有错误抑制符`@`，可以消除警告，如 `$a = @(25/0)`，这样就会隐藏掉除`0`警告

独有执行操作符，使用的是一对反向单引号，该符号一般位于数字`1`的左边，可以用来执行系统命令，并返回系统命令的执行结果

需要注意的是，`echo`和`print`也是操作符，而不是函数，通常`print`比`echo`速度要慢

可以说，`PHP`完全继承了`C语言`语法的简洁性和`Perl`作为工具型语言的实用性，另外还增添了自己独有的用法
----
===控制结构===

`PHP`有两种`else/if`，一种是`elseif`，另一种是`else if`，这两种写法在使用大括号的情况下是等价的，但在没有大括号的情况下不等价

两种允许的写法示例如下：

{{{PHP
<pre class="brush: php">
// 常规用法，使用大括号
if(xxx){
	xxx;
}
else if(xxx){  // 这种情况下使用 elseif 和 else if 均可
	xxx;
}
else{
	xxx;
}

// 简便用法，每一个分支只可以有一条语句
if(xxx):
	xxx;
elseif(xxx):  // 这种情况下只能使用 elseif
	xxx;
else:
	xxx;
endif;
</pre>
}}}

支持`switch`、`for`、`foreach`、`while`、`do-while`，其中`foreach`专门用于数组的遍历

类似于`endif;`，`PHP`还提供了`endswitch;`、`endfor;`、`endforeach;`、`endwhile;`的用法

`foreach`以前只能用于数组，但`PHP5`增加了对遍历对象属性功能的支持，遍历的语法有两种：

{{{PHP
<pre class="brush: php">
// 第一种，只遍历值
foreach($arr as $value){
	xxx
}

// 第二种，同时遍历索引和值
foreach($arr as $key => $value){
	xxx
}
</pre>
}}}

`foreach`遍历对象属性（在类外遍历时只能遍历对象的`public`属性，在类里面的方法则可以遍历对象的所有属性）：

{{{PHP
<pre class="brush: php">
$obj = new MyClass();

foreach($obj as $key => $value){
	print "$key => $value\n";
}
</pre>
}}}

`foreach`不支持错误抑制符`@`
----
===代码重用===

`PHP`使用语句`require`和`include`实现代码的重用（是语句而不是函数，所以可以选择带括号或者不带括号）

这两个语句唯一的区别在于，语句执行失败后，`require`会抛出一个致命的错误，而`include`给出一个警告后会继续执行

变体语句`require_once`和`include_once`可以确保代码只被导入一次，但通常`require`和`include`执行速度更快

这两函数的工作原理和`C/C++`的`#include`差不多，其只是简单将目标包含文件的内容添加到使用该语句的位置进行替换

一般在包含库文件时适合使用`require`和`require_once`，而加载模板之类的适合使用`include`和`include_once`

`PHP`的代码重用主要用于给网站设置统一的`页头`和`页尾`
----
<red>date</red> : 2012-05-24、2012-06-15、2012-06-17
----
