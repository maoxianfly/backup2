%title 《松本行宏的程序世界》

[[../../../index|首页]] - [[../index|Web]] - [[index|Ruby]]
==《松本行宏的程序世界》==
----
===为什么开发Ruby===

`Ruby`的设计原则：`简洁性`、`扩展性`、`稳定性`

`面向对象方法`并没有实现任何新的东西，用`面向对象`实现的算法也一定可以用`非面向对象`实现，而实现同样的算法，面向对象程序往往更慢

`Ruby`的设计目标就是成为拥有高开发效率，“能直接运行的`伪码式`”编程语言

编程语言的开发者不可能完全知道这种语言以后会被用来开发什么，会在哪些领域中应用，所以，编程语言的扩展性非常重要

实现扩展性的一个重要方法就是`抽象化`，这方面很多`面向对象`和`函数式`的现代编程语言做的很好

对`Ruby`的整数类型不限范围，是尽最大努力排除“`想当然`”，排除类似`千年虫`的隐患

考虑到`Ruby`的稳定性和可读性，并没有采用`Lisp`语言的`宏`，因为这会导致`Ruby`代码千奇百怪
----
===类、模块与继承===

`Ruby`的目标就是让程序员从计算机那里夺回主动权

换个说法，`多态`就是可以把不同种类的东西当做相同的东西来处理

`多态`的优点：

# 各种数据可以统一地处理，程序员只需关注要处理什么，而不是怎么去处理
# 可以根据对象的不同自动选择最合适的方法，程序内部不会发生冲突
# 如果有新的数据处理要求，只需通过简单的追加即可实现，不需要改动以前的代码，让程序具备扩展性

总而言之，`多态`提高了开发效率，所以说，`面向对象技术`最重要的一个概念就是`多态`

复杂性是面向对象最大的敌人

程序的重复是一切问题的根源

一个重要的原则是`DRY`原则，即`Don't Repeat Yourself`

`单一继承`的优点在于继承关系单纯，类之间的关系不会发生混乱，实现起来也比较简单

`单一继承`可以实现的功能，`多重继承`都可以实现，但是类之间的关系会变得复杂，这是`多重继承`的缺点

`多重继承`和`goto`语句一样，控制能力很强，但结构复杂，执行流程不容易理解

`多重继承`可能导致的三个问题：

# 结构复杂化
# 优先顺序模糊
# 功能冲突

既要获得`多重继承`的优点，又要避免它所带来的问题，这就必须找到一种合适的受限制的多重继承

这种受限制的`多重继承`，`Java`中称之为`接口`，而`Lisp`和`Ruby`中称之为`Mix-in`

`Ruby`的`Mix-in`其基本单位就是`module`，`module`的定义和`class`相似，但其不能生成实例，不能从普通类继承，只能够以抽象类的角色补充实例类的功能

通过`Min-in`，`Ruby`很好地解决了多重继承的问题，是一种非常先进和重要的技术

`面向对象`常见的两个误解：

# 对象是对现实世界中具体物体的反映，继承是对物体分类的反映
# 多重继承是不好的，但`Mix-in`还不错哦

以上两个观点都是错误的，多重继承并非不好，只不过是用得不好容易出问题，`Mix-in`也只不过是实现多重继承的一个技巧而已

类是对象的模板，是实现抽象和封装的工具，而继承则是利用这些模板的手段

把继承看作纯粹的`模板利用`即可，不要将对它的理解束缚在“`继承是对现实事物的分类的反映`”，这会妨碍我们对继承的理解

正确地使用`多重继承`是提高程序效率的有效方法，`多重继承`并不是老虎
----
===类型===

静态类型不用执行程序就可以通过机器检测出人为的错误，可以说是一项伟大的发明，`C语言`就是这方面的典型代表

静态类型诞生自`FORTRAN`，而动态类型始于`Lisp`，称其二者为编程语言的始祖一点也不为过

`C++`主要是受`Simula`影响而产生的，而不是`Smalltalk`，其实际上和`C语言`没有丝毫关系，只是为了兼容而采用了`C语言`的语法

静态类型最大的优点在于，能够在编译时发现类型不匹配的错误

由于静态类型明确指定了数据类型，所以编译器可以在编译阶段对程序做出优化，提高程序执行的速度

但静态类型具有的一个明显的缺点是缺乏`灵活性`

动态类型具有高度的`灵活性`以及`简洁性`，但其缺点也很明显：程序不执行就检测不到错误

著名的`鸭子类型`理论：只要看起来像鸭子，那么不管它实际上是什么，都把它当鸭子看待

`鸭子类型`阐述的道理是，不要去过分考虑对象到底属于什么类型，我们只需要关心它具有什么样的方法

在动态语言中运用`鸭子类型`的基本原则：

# 尽可能地利用动态数据类型的灵活性，不要以类为基准进行数据类型的检测
# 如果非要检测对象的类型，那也绝不要去检测该对象是否属于某个类，而是要检测该对象是否具有某个方法
----
===元编程===

类的类称为`元类`，支撑别的对象的类对象称为`元对象`，`元编程`亦即对程序进行编程的意思

`反射`是指程序在执行时取出程序的信息或者改变程序的信息
----
<red>date</red> : 2012-03-16、2012-10-07合并整理
----
