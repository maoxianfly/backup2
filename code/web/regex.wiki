%title PHP正则语法
%template discuss

[[../../index|首页]] - [[index|Web]]
==PHP正则语法==
----
===分隔符===

分隔符可以是任意的非字母数字、非反斜线、非空白字符，如`#`、`+`、`~`等，也可以是成对的括号，如`{`、`}`，不一定非得是`/`

对于链接之类的匹配，用非`/`分隔符就可以避免频繁对`/`转义了

也可以用`preg_quote`函数自动将字符串转成合法的正则字串
----
===元字符===

* `\`：转义
* `^`：断言开始位置（多行模式下代表行首），当作为方括号内的第一个字符时代表取反
* `$`：断言结束位置（多行模式下代表行尾）
* `.`：除换行符以外的任意字符（但是在方括号中没有特殊含义）
* `|`：可选分支
* `?`：量词，`0`次或`1`次匹配，将`?`加在量词的后面（包括`?`自身）将使得该量词的贪婪性逆转，贪婪的变成非贪婪，非贪婪的变成贪婪
* `*`：量词，`0`次或多次匹配
* `+`：量词，`1`次或多次匹配
* `{`：开始一个自定义量词
* `}`：结束一个自定义量词
* `[`：开始字符类定义
* `]`：结束字符类定义
* `-`：仅在方括号内代表范围
* `(`：开始一个子表达式
* `)`：结束一个子表达式
----
===常用转义===

需要特别注意的一点，如果想要匹配一个反斜线（`\`），那就必须用四个反斜线（`\\\\`）才能匹配上。原因：`\\\\`转义后得到`\\`，而正则引擎也把`\`当作转义字符，所以`\\`将再度转义成`\`

* `\a`：响铃
* `\e`：转义
* `\f`：换页
* `\n`：换行
* `\r`：回车
* `\t`：水平制表
* `\cx`：`Ctrl-X`控制键，`x`可以是任意字符
* `\xhh`：十六进制编码
* `\ddd`：八进制编码或向后引用
* `\d`：任意十进制数字
* `\D`：任意非十进制数字
* `\w`：（小写）任意单词字符
* `\W`：（大写）任意非单词字符
* `\s`：（小写）任意空白字符
* `\S`：（大写）任意非空白字符
* `\h`：任意水平空白字符
* `\H`：任意非水平空白字符
* `\v`：（小写）任意垂直空白字符
* `\V`：（大写）任意非垂直空白字符
* `\b`：退格或单词边界
* `\B`：非单词边界
* `\A`：目标的开始位置
* `\z`：（小写）目标的结束位置
* `\Z`：（大写）目标的结束位置或结束处的换行符
* `\G`：在目标中首次匹配位置
----
===字符类符号===

字符类符号是用在方括号中代表一类字符的快捷标识符，使用`[:字符类符号:]`来表示

可以在字符类符号名前面加上`^`进行取反，如`[:^digit:]`

* `alpha`：字母
* `alnum`：字母和数字
* `lower`：小写字母
* `upper`：大写字母
* `digit`：十进制数字
* `xdigit`：十六进制数字
* `word`：单词字符
* `space`：空白字符
* `blank`：空格和水平制表符
* `cntrl`：控制字符
* `print`：打印字符，包括空格
* `graph`：打印字符，不包括空格
* `punct`：打印字符，不包括字母和数字
* `ascii`：`0-127`的`ASCII`字符
----
===子表达式===

* 捕获序号：`\0`代表整个模式匹配的结果，`\1`、`\2`代表的是第`1`个括号和第`2`个括号的匹配结果，余者依次类推
* 阻止捕获：只需在左括号后面紧接`?:`即可，如`(?:pattern)`
* 模式命名：支持三种语法，分别是`(?P<name>pattern)`、`(?<name>pattern)`、`(?'name'pattern)`
* 复制数字：在左括号后面紧接`?|`即可使得该括号内的子括号编号都绑定到同一个数字，如`(?|(Sat)ur|(Sun))day`中的`Sat`和`Sun`都将绑定到`\1`
----
===条件子组===

类似编程语言里的三元运算符`a ? b : c`，条件子组的语法如下，其中第三元是可选的：
# `(?(condition)yes-pattern)`
# `(?(condition)yes-pattern|no-pattern)`
----
===反向引用===

常用的写法是`\数字`

也可用`\g数字`或者`\g{数字}`实现相对引用，`\g{数字}`的写法允许使用负数

对于命名分组的引用，可以使用的写法有：`(?P=名字)`、`\k<名字>`、`\k'名字'`、`\k{名字}`、`\g{名字}`
----
===断言===

断言是对匹配字符的测试，不会实际消耗任何字符，这点值得注意

断言分`前瞻断言`和`后瞻断言`

前瞻断言包括`(?=)`和`(?!)`两种语法，分别断言匹配和不匹配

后瞻断言包括`(?<=)`和`(?<!)`两种语法，分别断言匹配和不匹配

断言没有顺序要求，也可以任意嵌套
----
===注释===

`(?#注释内容)`，注释不允许嵌套
----
===正则选项===

如果一个选项是写在子表达式里面的，那么该选项将只对该子表达式内剩余的部分生效

* `i`：大小写不敏感
* `m`：匹配多行字符串
* `s`：使点号可以匹配任意字符，包括换行符
* `x`：忽略空白字符
----
<red>date</red> : 2013-04-16
----
