%title 基础语法拾遗

[[../../../index|首页]] - [[../index|Python]] - [[index|Base]]
==基础语法拾遗==
----
===基本数据类型===

`object`是`Python`所有内置数据类型的基类，`int`、`str`、`list`、`tuple`、`dict`等都是它的子类型

没有字符类型，再短的文本也是字符串

支持几乎所有`C语言`支持的转义字符，如不想转义符生效，则只需在字符串最前面加上一个`r`

基于池机制，内容相同的两个字符串指向的是同一个值。正因为此，所以修改字符串值时不会修改原有的字符串，而是重新生成一个新的。`元组`的修改也同`字符串`一样不会影响原有值

`Python`通常不会回收字符串池的空间，所有运行期间生成的临时字符串对象都将保存到进程结束。所以如果需要连接若干字符串，最好是使用成员方法`join`，该方法不会生成多余的中间变量

以三个连续引号标记文档字符串，可以用来定义复杂的字符串，常用于块注释

和`C语言`一样，`bool`值可以参与运算

`**`表示幂运算，如 `2**3 = 8`

`**`的优先级最高，`*`、`/`、`%`次之，`+`、`-`再次之，`&`、`|`、`^`最低

特有整除运算符`//`，对于`1 // 2`，计算结果将为`0`，就算是浮点数也不例外，如 `1.0 // 2.0`将得到`0.0`

取余运算符`%`对浮点数也同样适用，如 `2.75 % 0.5 == 0.25`（`2.75 == (0.5 * 5) + 0.25`）

`Python`的长整型`long`是不限大小的，只要计算机的内存足够大，想有多大就有多大

内置支持复数运算，从某种意义上讲，`Python`的数值计算体系是基于复数的，而不是通常的实数

数字前加前导`0`表示八进制，加前导`0x`表示十六进制，加后缀`l`或`L`表示长整数，加后缀`j`或`J`表示一个复数的虚部
----
===字符串===

字符串格式化的基本形式：`"My name is %s and age is %d" % ("Ruchee", 22)`

字符串常用函数

# `join()`：将原字符串插入参数字符串的每两个字符之间，如果参数字符串只有一个字符，则直接返回该参数字符串。如 `str = 'Ruchee'`，则`str.join('A')`返回的是`'A'`，而`str.join('ABC')`则返回`'ARucheeBRucheeC'`
# `split()`：将字符串分拆成列表，默认按空格分割，可以接受两个参数，第一个参数为分割字符，第二个参数为分割次数。如 `str = 'I love Python'`，则`str.split()`返回的是`['I', 'love', 'Python']`，而`str.split('o', 1)`则返回`['I l', 've Python']`
----
===复合数据类型===

`list`是一个强大的通用线性容器，可以混合存放不同类型的元素，且具有强大的切片分割能力

# `s[:10]`：取从字符串开始到下标`9`之间的所有字符，不包含下标`10`
# `s[10:]`：取从下标`10`开始到字符串结尾的所有字符，包含下标`10`，所以`s[:10] + s[10:]`就等于原来的字符串
# `s[1:10]`：取下标`1`到下标`9`的字符，不包含下标`10`
# `s[1:10:2]`：以`2`为步长取指定区间的字符
# `s[:]`：复制原序列
# `s[::-1]`：倒置原序列（数值为负则代表反向）

`range`可以快速生成等差数列，特点是“`前闭后开`”、“`前包后不包`”

# `range(10)`：生成`0`到`9`的列表
# `range(2, 10)`：生成`2`到`9`的列表
# `range(2, 10, 2)`：步进为`2`，生成`[2, 4, 6, 8]`
# `range(10, -1, -1)`：倒序生成`10`到`0`的列表

`xrange`和`range`功能一样，唯一的区别是其不返回列表，而是返回一个迭代器对象。在生成数列时`xrange`比`range`节省内存，通常大数枚举使用`xrange`更有效率

修改字符串不会改变原字符串的值，而修改列表则会同步改变；如果不想同步改变原列表的值，可以使用切片的方法进行`浅复制`，或者使用内置的`copy`模块进行`深复制`，具体的函数是`deepcopy()`

`列表`既可以当作`数组`使用，也可以当成`链表`、`堆栈`、`队列`等数据结构来使用，其内置了以下常用工具方法：

* `count(123)`：统计值为`123`的元素出现的次数
* `index(123)`：第一个值为`123`的元素的下标值
* `insert(2, -1)`：在下标为`2`的位置插入元素`-1`
* `append(123)`：在列表末尾插入元素`123`
* `pop()`：弹出列表最后一个元素
* `pop(3)`：弹出下标为`3`的元素
* `remove(123)`：移除第一个值为`123`的元素
* `sort()`：列表排序，或`sort(自定义比较函数)`
* `reverse()`：列表倒置
* `max()`：获取目标列表值最大的元素
* `min()`：获取目标列表值最小的元素

`元组tuple`相当于只读的列表，使用小括号标识

可以使用`set()`得到不重复的元素集合，传入的重复元素会自动合并，此外还支持交、并、差、补等操作

`字典dict`相当于带索引的数组，使用中括号标识，当对`dict`中不存在的键名赋值时，`Python`会自动将这个不存在的键值对添加进字典

`tuple`也可以作为字典的键，但`list`不可以，因为`list`是可变的，而字典的键名要求不可变

字典是一个无序的键值对容器，所以如果需要按某种顺序查找数据，则应该先调出键名的列表，对键名排序后再根据这个列表来访问字典元素
----
===控制结构===

`Python`没有提供`switch`语句，多路分支由`if/elif/else`实现

`for`语句也可带`else`，当`for`迭代结束后会执行`else`再退出，但如果有`break`跳出循环则不会执行`else`。这种语法多用于搜索遍历

`while`语句也可带`else`，当判断表达式为`false`退出循环时执行

空语句`pass`相当于`C语言`里一个单独的分号，不做任何事情

异常处理的关键字为`try`、`except`和`finally`，使用`raise`手动抛出异常，`try`也可以带`else`语句

被认为是`False`的几种情况：`数字0`、`空字符串`、`空列表`、`空元组`、`空字典`
-----
===函数及其他===

`Python`函数的形参不需要指定类型，所以不能够通过不同的参数类型来定义函数重载，类成员函数也如此

使用`*`运算符可以进行参数的拆封

在定义函数时可以通过`*`运算符指定一个变长的参数列，也可以通过`**`操作符定义关键字参数的拆封和解封，`**`操作的对象是一个字典

`lambda`：用来定义临时的匿名函数，是函数的一种简写形式，可以调用其他函数，但不允许在其中出现输出语句和其他流程控制语句

`Python`的`self`相当于`C++`的`this`指针，不同的是，在`Python`中需要显式定义，但在调用时却不需要传值

名为`__init__`的函数即为`Python`的构造函数

`yield`：作用与`return`基本一致，但所不同的是`yield`返回值以后并不结束函数，而是重新回到函数内部继续执行

在函数内部可以使用`global`关键字引用全局变量

`Python`对象基于引用计数，当引用计数为`0`时，虚拟机就会销毁该对象，此外`Python`虚拟机还会定时搜索无法被访问的对象并将其销毁，以防内存泄漏
----
===常用函数===

工具函数

* `id`：返回`Python`对象的内部标识符，即其在虚拟机里面的内存地址
* `type`：获取对象的类型
* `print`：打印`Python`对象的显示信息
* `len()`：获取目标对象的长度或元素个数
* `dir()`：列出目标模块中所有可访问内容
* `str()`：将参数数据强制转换成字符串，如果传递的是模块名，返回的将是模块的安装路径

类和对象相关

* `issubclass(a, b)`：判断`a`是否是`b`的子类型
* `isinstance(a, b)`：判断`a`是否是`b`子类的实例
* `callable()`：检测参数对象是否可以被调用，可以返回`True`，否则返回`False`

复合数据类型

* `sorted()`：接收一个可迭代对象，返回一个有序列表
* `' and '.join([a, b])`：用` and `分割目标列表的各个元素

特殊函数

* `__init__`：类的构造函数
* `__del__`：类的析构函数，在类对象实际被虚拟机回收时调用
----
===特殊符号===

* `__name__`：如果模块被`import`，则`__name__`通常就是该模块的文件名，如果是作为独立的程序运行，则`__name__`值为`__main__`
----
<red>date</red> : 2011-07-06、2011-07-18、2011-07-20、2012-04-17、2012-06-27、2012-06-28、2012-09-12、2012-10-09合并整理
----
