%title Django基础
%template discuss

[[../../index|首页]] - [[index|Python]]
==Django基础==
----
===整体架构===

`Django`应用的运行主要依赖四个组成部分：

* `urls`：指定什么样的`URL`关联什么样的视图函数
* `models`：描述数据的组织结构
* `templates`：描述页面如何显示
* `views`：负责建立业务逻辑，组合数据和模板，然后返回给`urls`

相对于传统的`MVC`模式，`Django`对应的是`MTV`模式。模型是不变的，但模板却充当了视图的角色，视图充当了控制器的角色
----
===常用命令===

* `django-admin.py startproject projectname`：新建`Web`工程
* `manage.py startapp appname`：新建`Django`应用
* `manage.py runserver`：启动服务器，也可以在后面跟自定义的端口或`IP`地址，如：`8080`、`0.0.0.0:8080`
* `manage.py shell`：在工程目录下启动交互式`shell`
* `manage.py dbshell`：根据配置文件设置的数据库类型，自动选择合适的命令对当前项目的数据库进行操作

* `manage.py validate`：验证模型是否有效
* `manage.py sql appname`：查看该应用模型所对应的`SQL`语句
* `manage.py sqlall appname`：查看更为完整的`SQL`语句
* `manage.py syncdb`：向数据库写入数据模型。此命令只能对模型进行写入操作，不能修改和删除
----
===数据模型===

测试数据库连接是否正确：
# 使用`manage.py shell`启动`Python`交互界面
# 键入代码：`from django.db import connection`
# 键入代码：`cursor = connection.cursor()` 

每个数据模型都是`django.db.models.Model`的子类

一个类就相当于一个表，类的属性就相当于表的字段

对于`多对多`的联系，只需在其中一个类中书写即可，`Django`会自动创建一个额外的多对多连接表来进行处理

不需要显式定义任何主键，`Django`会自动为每个模型生成一个自增`id`整数主键

应该确保每个模型里都定义有一个`__unicode__()`方法，这个方法负责返回一个`Python`字符串

每个模型类都允许在类里面定义一个名为`Meta`的类，以指定数据显示时的默认排序方式：
{{{class="brush: python"
class Meta:
	ordering = ['name', 'age']
}}}

实际写入数据库的表名是形如`appname_modelname`的形式，如`blogs_user`

对于外键，`Django`会自动给外键名添加一个`_id`后缀
----
===数据操作===

* `modelname.objects.all()`：获得模型表中的所有记录，返回列表的形式
* `modelname.objects.filter(条件)`：数据过滤，多个条件用逗号分隔，返回记录的列表形式，如果条件为空则相当于`objects.all()`
* `modelname.objects.get(条件)`：获取单个数据元素，没有查询结果或结果多于`1个`时会抛出异常
* `modelname.objects.order_by("字段1", "字段2")`：数据排序，多个字段以逗号分隔，在字段名前面加上负号就是逆向排序
* `modelname.objects.filter(条件).update(name='Ruchee')`：更新某些记录的指定字段，而不是像`save()`一样总是更新所有字段。`update()`的返回值为受影响的记录条数，`objects.all().update(name='Ruchee')`将对该表所有记录的该字段进行更新
* `modelname.objects.filter(条件).delete()`：删除符合条件的记录，`objects.all().delete()`将删除所有记录
----
===魔术用法===

在使用条件匹配进行数据筛选时，`Django`使用在字段名的后面加双下划线再加某些特定字符的方式，实现更高级的数据操作，如`name__contains='Ruchee'`

* `contains`：包含，相当于`SQL`里的`like`
* `icontains`：大小写无关的包含
* `startswith`：以什么打头
* `endswith`：以什么结尾
* `range`：在某区间之间
----
===模板系统===

`Django`默认的模板系统只是`Python`的一个库，并非仅仅只可用于`Django`环境

为阻止某些方法被模板系统执行，只需将该方法的`alters_data`属性设为`True`即可，如`delete.alters_data = True`

对于无效的变量，`Django`模板系统会把其当成`空字符串`，不会引发任何错误或异常
----
===模板标签===

`1`、变量

使用两对大括号包围，如`{{ name }}`

`2`、标签

使用一对大括号和一对百分号包围，如`{% for %}`

`3`、逻辑判断

`{% if %}`、`{% elif %}`、`{% else %}`、`{% endif %}`

不支持圆括号的组合判断，多重判断可以使用`{% elif %}`来实现，每个`{% if %}`都要用一个`{% endif %}`关闭，允许使用`and`、`or`、`not`关键字

其中`{% elif %}`标签是`1.4`版本新增的

`4`、循环迭代

`{% for %}`、`{% endfor %}`

不支持退出循环的操作，不支持`continue`语句

正迭代如：`{% for name in names %}`，反向迭代加上`reversed`即可，如：`{% for name in names reversed %}`

`{% for %}`支持一个可选的`{% empty %}`分句，当所迭代的列表或字典为空时执行

`Django`内置了一个特殊的`forloop`模板变量

* `forloop.counter`：表示当前循环的次数，从`1`开始计数；而`forloop.counter0`则从`0`开始计数<br>
* `forloop.revcounter`：表示循环中剩余项的个数，循环开始时为循环项总数，最后一次循环置`1`；而`forloop.revcounter0`在循环开始时为循环项总数减`1`，最后一次循环置`0`
* `forloop.first`：布尔值，执行第一次循环时为`True`
* `forloop.last`：布尔值，执行最后一次循环时为`True`
* `forloop.parentloop`：引用上一层循环的对象

`forloop`变量仅能在循环中使用，一旦脱离`{% endfor %}`标签就不可访问了

`5`、快速比较

`{% ifequal %}`、`{% ifnotequal %}`、`{% endifequal %}`

支持`{% else %}`标签，每个比较标签需要跟两个参数，参数类型只支持模板变量、字符串、整数、小数，如：`{% ifequal name "Ruchee" %}`

`6`、模板注释

`{* This is a comment *}`

这种形式只支持单行注释，不能跨行

也可以使用`{% comment %}`和`{% endcomment %}`标签对，这样就可以写多行注释了
----
===模板继承===

`{% include %}`：导入其他模板，功用相当于`C`语言的`#include`，只是简单的复制，参数可以是模板名，也可以是变量，支持多层导入，如`{% include 'bbs/base.html' %}`

`{% block %}`：标识支持重载的部分，以便子模板有选择地覆盖

`{% extends %}`：加载父模板，位置必须是子模板的最前面，支持多重继承，参数可以是变量

`{{ block.super }}`：获取父模板中代码块的内容
----
===过滤器===

过滤器的使用与`Unix`的管道类似，可嵌套、可串联、可带参数，参数使用双引号标识

常用的重要过滤器：

* `addslashes`：添加反斜杠到反斜杠、单引号或双引号前面，常用于处理包含`JavaScript`的文本
* `date`：按指定的格式格式化`date`或`datetime`对象
* `escape`：转义`&`、引号、小于、大于等符号，以使得用户提交的数据是有效的`XML`或`XHTML`
* `length`：返回可以测量长度的变量的长度
----
===模板渲染引擎===

* `Context`：传递数据
* `render`：使用`Context`处理过的数据渲染目标模板

典型用法：
{{{class="brush: python"
from django.template import Template, Context

t = Template("My name is {{ name }}.")
c = Context({'name' : 'Ruchee'})
t.render(c)
}}}

也可将`Context`传递数据的语句合并进去：
{{{class="brush: python"
t = Template("My name is {{ name }}.")
t.render(Context({'name' : 'Ruchee'}))
}}}

`Django`模板引擎异常强大，除了普通变量外，还可以访问字典的键值、属性、列表的索引以及对象的方法

不能给方法传递参数，且只能调用无参方法；不能使用负数索引，形如`foo.-1`的写法会引发`TemplateSyntaxError`异常

句点查找支持多级嵌套，如：`person.name.upper`

当模板系统在变量名中遇到点号时（例如`foo.bar`），其处理顺序是：
# 当成字典键值，如：`foo['bar']`
# 当成对象属性，如：`foo.bar`
# 当成方法调用，如：`foo.bar()`
# 当成列表索引，如：`foo[bar]`

这是一种短路逻辑，一旦有效匹配就不会再考虑其他情形
----
===视图函数===

每个视图都以一个`HttpRequest`对象为第一个参数，该参数通常命名为`request`

每个视图函数都负责返回一个`HttpResponse`对象

实现视图函数时，不应该将所接收的参数类型定死，这样就缺少了灵活性，不符合`松散耦合`

可以在视图函数的任何一个位置放置语句`assert False`触发`Django`出错页面，以查看所有局部变量的值
----
===模板渲染===

第一种方法
# 导入所需模块：`from django.template.loader import get_template`、`from django.template import Context`、`from django.http import HttpResponse`
# 加载模板：`t = get_template('time.html')`
# 渲染模板：`html = t.render(Context({'time' : time}))`
# 返回渲染后的模板：`return HttpResponse(html)`

第二种方法
# 导入所需模块：`from django.shortcuts import render_to_response`
# 一步加载、渲染并返回：`return render_to_response('time.html', {'time' : time})`

支持模板子目录，没有层数的限制 

在`render_to_response`中使用内置的`locals()`方法可以自动将当前方法中所有的局部变量传入目标模板，包括隐含的`request`

如`return render_to_response('time.html', locals())`，这种方法有利有弊，利在可以少敲几个字符，弊在将不需要的变量也传了进去
----
===URL正则===

`Django`的`URLconfs`支持通用正则表达式

如需要从正则表达式里面提取数据，只需将相应的模式匹配用圆括号括起来即可
----
<red>date</red> : 2013-04-25合并整理
----
