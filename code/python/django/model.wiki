%title Models

[[../../../index|首页]] - [[../index|Python]] - [[index|Django]]
==Models==
----
===数据库连接===

测试数据库连接是否正确

# 使用`manage.py shell`启动`Python`交互界面
# 键入代码：`from django.db import connection`
# 键入代码：`cursor = connection.cursor()` 

----
===数据模型===

每个数据模型都是`django.db.models.Model`的子类

一个类就相当于一个表，类的属性就相当于表的字段

对于`多对多`的联系，只需在其中一个类中书写即可，`Django`会自动创建一个额外的多对多连接表来进行处理

不需要显式定义任何主键，`Django`会自动为每个模型生成一个自增`id`整数主键

应该确保每个模型里都定义有一个`__unicode__()`方法，这个方法负责返回一个`Python`字符串

每个模型类都允许在类里面定义一个名为`Meta`的类，以指定数据显示时的默认排序方式：
{{{Python
class Meta:
	ordering = ['name', 'age']
}}}
----
===生成SQL===

实际写入数据库的表名是形如`appname_modelname`的形式，如`blogs_user`

对于外键，`Django`会自动给外键名添加一个`_id`后缀
----
===数据操作===

# `modelname.objects.all()`：获得模型表中的所有记录，返回列表的形式
# `modelname.objects.filter(条件)`：数据过滤，多个条件用逗号分隔，返回记录的列表形式，如果条件为空则相当于`objects.all()`
# `modelname.objects.get(条件)`：获取单个数据元素，没有查询结果或结果多于`1个`时会抛出异常
# `modelname.objects.order_by("字段1", "字段2")`：数据排序，多个字段以逗号分隔，在字段名前面加上负号就是逆向排序
# `modelname.objects.filter(条件).update(name='Ruchee')`：更新某些记录的指定字段，而不是像`save()`一样总是更新所有字段。`update()`的返回值为受影响的记录条数，`objects.all().update(name='Ruchee')`将对该表所有记录的该字段进行更新
# `modelname.objects.filter(条件).delete()`：删除符合条件的记录，`objects.all().delete()`将删除所有记录
----
===Django魔术用法===

在使用条件匹配进行数据筛选时，`Django`使用在字段名的后面加双下划线再加某些特定字符的方式，实现更高级的数据操作，如`name__contains='Ruchee'`

# `contains`：包含，相当于`SQL`里的`like`
# `icontains`：大小写无关的包含
# `startswith`：以什么打头
# `endswith`：以什么结尾
# `range`：在某区间之间
----
<red>date</red> : 2011-07-23、2012-04-28
----
