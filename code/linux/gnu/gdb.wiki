%title GDB调试器

[[../../../index|首页]] - [[../index|Linux]] - [[index|GNU]]
==GDB调试器==
----
===常用命令===
`list (l)`：列出源代码，默认10行，其后可跟函数名或行号；也可以用逗号分隔两个参数，以打印指定范围的源代码<br>
`break (b)`：设置断点，后接函数名或行号<br>
`run (r)`：执行程序，遇到断点会自动暂停<br>
`continue (c)`：程序继续执行，直到遇到下一个断点或到达程序结尾<br>
`next (n)`：执行一整行代码，然后停留在下一行，也称“单步跳过”<br>
`step (s)`：功能基本和`next`一样，但是遇到函数调用时，`step`会跳进函数体内，然后停留在函数的第一条语句处，也称“单步跳入”<br>
`finish (fin)`：继续执行目前所在的函数，直到遇到函数体内的下一个断点或直到函数结束，也称“单步跳出”<br>
`print (p)`：打印变量的值

`quit (q)`：退出调试<br>
`kill`：终止调试器，但并不关闭，所有设置都将保存，待修改好源文件重新编译后使用`run`再次开始调试，`GDB`会重新加载可执行文件<br>
`help (h)`：显示帮助文档

`file`：加载需要调试的目标程序<br>
`set args`：后跟当前调试程序所需的参数表列<br>
`show args`：显示目前为调试程序所设置的参数表列<br>

对于`next`和`step`命令，如果执行一次后还想继续执行，只需直接回车即可，`GDB`会自动执行上一条命令

===其他调试命令===
`info all-registers (info all)`：显示所有处理器寄存器的内容，包括浮点和向量寄存器<br>
`info register (info reg)`：显示CPU寄存器的内容<br>
`info source`：打印当前源文件的信息<br>
`info sources`：打印当前调试程序包含的所有源文件信息<br>
`info address`：后跟变量或函数名，可以显示目标变量或函数的地址信息<br>
`info breakpoints (info b)`：显示所有设置的断点<br>

`info frame (info f)`：显示当前堆栈帧的相关信息，包括返回值、寄存器值<br>
`info locals (info lo)`：列出当前函数的局部变量<br>
`info args`：列出当前函数调用的自变量值 

`tbreak (tb)`：设置临时断点，`GDB`会在到达这个语句后自动将其删除<br>
`delete (d)`：删除某个断点或某个范围内的断点，后接断点的编号，或以竖线分隔的两个断点编号；不加参数则删除所有断点<br>
`disable (dis)`：临时禁用某个断点或某个范围内的断点，使用格式同`delete`<br>
`enable (en)`：恢复被禁用的某个断点或某个范围内的断点，使用格式同`delete`<br>
`ignore 1 5 (ig 1 5)`：连续忽略编号为1的断点5次

===条件中断===
`break 断点位置 if 中断条件`：其中位置可以是函数名或行号，条件可以是C语言任何形式的表达式<br>
如：`break 20 if i == j - 1`

`condition 断点编号 中断条件`：可以在已有断点的位置再新增一个断点，或修改其原来的中断条件<br>
如：`condition 20 *p1 != *p2`<br>
如想删除中断条件，直接使用`condition 断点编号`即可

===GDB命令行===
`-silent (-si)`或`-quiet (-q)`：启动时不显示版本信息<br>
`--args`：此选项后必须立即跟要调试的目标程序名，然后接该目标程序需要的参数表列，这样这些参数就不会被当成`GDB`自身的参数<br>
`-windows (-w)`：打开`GDB`的GUI界面，如果有的话（`Cygwin`包含GUI界面，`MinGW`不支持）<br>
`-tui`：打开`GDB`的文本式GUI界面，如果有的话（`Cygwin`支持，`MinGW`不支持）<br>

===GDB命令===
`set logging on (set lo on)`：开启日志记录<br>
`show logging (show lo)`：显示日志信息<br>
`set listsize 5 (set li 5)`：设置`list`默认输出的行数<br>
`show listsize (show li)`：显示`list`默认输出的行数

===显示调用轨迹===
`backtrace (bt)`，同义词还有`where`、`info stack (info s)`<br>
使用上述命令可以得到函数的调用次序，这在调试递归调用时特别有效

`frame (f)`：显示堆栈帧信息，后面可跟堆栈帧的编号，不跟参数则显示当前堆栈帧的信息

`up`，跳到上一个堆栈；`down`，跳到下一个堆栈

===显示数据的详细用法===
`pint 输出格式 变量名称或表达式`：表达式的执行结果会影响到程序中相应变量的值，示例如下

`p a`：输出变量a的取值<br>
`p a=7`：给变量a赋值为7，相当于命令`set variable a=7 (set var a=7)`<br>
`p a*a`：输出变量a自乘的结果<br>
`p 2*sum($3)`：调用sum函数，传入参数`$3`（此即调试过程中第三次打印的数值），然后将sum函数执行的结果乘以2返回<br>
`p main::a`：跨堆栈帧存取变量信息

可以在`GDB`调试过程中定义新的变量，使用`p $a = *p1`或`set $a = *p1`的格式

格式化输出选项

# `/d`：十进制输出，也是输出整数时的默认格式
# `/u`：十进制无符号整数
# `/c`：字符形式输出
# `/o`：八进制输出
# `/x`：十六进制输出
# `/t`：二进制输出

其他格式化选项

# `/a`：以十六进制形式输出地址
# `/f`；将目标值以浮点数的形式显示

===显示内存区域===
基本格式：`x /显示个数 格式修饰符 单位内存大小 address`

`显示个数`：指定要显示多少个内存单位，默认为1<br>
`格式修饰符`：除了可以使用`print`的格式修饰符以外，还可以额外使用以下两个<br>
# `/s`：将目标地址的数据以字符串的形式显示出来
# `/i`：以汇编语言的形式显示机器指令
`单位内存大小`：指定每个内存单位空间的大小，有以下四种类别，默认为`w`<br>
# `b`：一个字节
# `h`：两个字节（半个字）
# `w`：四个字节（一个字）
# `g`：八个字节（双字）
`address`：目标地址

使用示例如下：

`x/s &a`：以字符串的形式显示变量a所处地址开始的一个字的内容（因为默认显示1个单位，每个单位为一个字）<br>
`x/15xb &a`：以十六进制形式显示变量a所处地址开始的15个字节的内容<br>
`x/10i &a`：将变量a所处地址开始的10条机器语言翻译成汇编代码

===观测点的设置===
`watch (wa)`：当指定表达式的值发生改变时，程序中止执行<br>
`rwatch (rw)`：当程序读取和目标表达式相关的任何对象时，程序中止执行<br>
`awatch (aw)`：当程序读取或修改和目标表达式相关的任何对象时，程序中止执行
----
<red>date</red> : 2011-05-25、2011-05-26、2012-09-19
----
