%title Automake自动化构建工具

[[../../../index|首页]] - [[../index|Linux]] - [[index|GNU]]
==Automake自动化构建工具==
----
===工作环境===
需要用到以下组件：

`autoscan`、`aclocal`、`autoconf`、`autoheader`、`automake`、`perl`、`m4`
----
===构建步骤===
以`hello`工程为例，首先新建一个工程文件夹，命名为`hello`，然后在里面放置源文件`hello.c`

`1`、使用`autoscan`扫描源代码，生成`configure.scan`文件：<br>
`autoscan ./`

`2`、将`configure.scan`重命名为`configure.ac`，修改和添加必要的信息：
{{{Make
AC_PREREQ([2.68])
AC_INIT([hello], [1,0], [my@ruchee.com])  // 软件名称、版本号、作者邮箱
AM_INIT_AUTOMAKE(hello, 1.0)              // Automake所必备的宏，必须添加
AC_CONFIG_SRCDIR([hello.c])               // 源文件名
AC_CONFIG_HEADERS([config.h])             // config文件，为autoheader准备

# Checks for programs.
AC_PROG_CC                                // 编译器，默认GCC
# Checks for libraries.
# Checks for header files.
# Checks for typedefs, structures, and compiler characteristics.
# Checks for library functions.
AC_OUTPUT(Makefile)                       // 指定输出文件名为Makefile
}}}

`3`、使用`aclocal`扫描`configure.ac`，生成`aclocal.m4`文件：<br>
`aclocal`

`4`、使用`autoconf`工具将`configure.ac`中的宏展开，生成`configure`脚本：<br>
`autoconf`

`5`、使用`autoheader`生成`config.h.in`文件：<br>
`autoheader`

`6`、手工编写`Makefile.am`文件：
{{{Automake
AUTOMAKE_OPTIONS = foreign                // 软件等级，默认是gnu，不合乎GNU规范的必须指定为foreign，不然将构建出错
bin_PROGRAMS = hello                      // 可执行文件名，多个用空格隔开
hello_SOURCES = hello.c                   // 源文件名，多个用空格隔开
}}}

`7`、使用`automake`生成`Makefile.in`文件：<br>
`automake --add-missing`

`8`、运行`configure`，将`Makefile.in`变成最终的`Makefile`：<br>
`./configure`
----
使用`Automake`生成的`Makefile`文件相当全面，支持的预设命令有：

# 编译：`make`
# 安装：`make install`
# 卸载：`make uninstall`
# 清理：`make clean`
# 打包：`make dist`
----
<red>date</red> : 2011-08-17
----
