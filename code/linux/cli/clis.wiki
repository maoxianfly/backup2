%title 重量级的几个常用命令

[[../../../index|首页]] - [[../index|Linux]] - [[index|CLI]]
==重量级的几个常用命令==
----
===cat：读取文件内容===

* 命令：`cat`
* 格式：`cat 参数 要读取的目标文件`

参数列表

# `-n`：显示行号
# `-b`：只对非空行显示行号
# `-A`：显示所有字符，包括换行符和`TAB`键

`nl`等同于`cat -b`
----
===expand：处理制表符===

* 命令：`expand`、`unexpand`
* 格式：`expand 参数 要处理的目标文件`

只会将处理结果输出，不会更改原文件

参数列表

# `-t 数字`：设置制表符为指定个字符
----
===tar：压缩与解压缩===

* 命令：综合（`tar`）、压缩（`gzip`、`bzip2`、`zip`）、解压缩（`gunzip`、`bunzip2`、`unzip`）
* 格式：`tar 参数 目标文件 需要包含的文件表列`

参数列表

# `-c`：创建新归档
# `-x`：解包归档文件
# `-z`：调用`gzip`，对应于`.tar.gz`格式
# `-j`：调用`bzip2`，对应于`.tar.bz2`格式
# `-f`：后接归档名，指定操作对象
# `-t`：显示归档里面包含的文件
# `-v`：显示操作细节

常用格式

# `-czvf`：新建`.tar.gz`压缩包
# `-cjvf`：新建`.tar.bz2`压缩包
# `-xzvf`：解压`.tar.gz`文件
# `-xjvf`：解压`.tar.bz2`文件
# `-tzvf`：查看`.tar.gz`压缩包里面包含的文件
# `-tjvf`：查看`.tar.bz2`压缩包里面包含的的文件
----
===grep：搜索字符串===

* 命令：`grep`
* 格式：`grep 参数 关键字 需要查找的文件表列`，如关键字多于一个单词，可以使用引号包围

参数列表

# `-n`：显示行号
# `-i`：不区分大小写
# `-x`：整行严格匹配
# `-c`：只显示匹配行的数量
# `-v`：只显示不匹配的行
# `-l`：在多个文件中查找时，只显示首次匹配到的文件，不重复显示
# `-b`：在匹配的每一行前显示关键字在其所在行中的位置偏移量
----
===sort：文件排序===

* 命令：`sort`
* 格式：`sort 参数 目标文件表列`

排序规则

# `-d`：按字典顺序排序，仅对字母、数字、空格、制表符生效
# `-f`：不区分大小写
# `-I`：忽略非打印字符
# `-b`：忽略前导空白
# `-r`：逆序输出排序结果
# `-t 分隔符`：按指定分隔符排序

设置选项

# `-m`：若给定文件已排序，则合并文件
# `-c`：检查文件是否已排序，如果没排序则打印出错信息，并以状态值`1`退出
# `-u`：相同行只保留一行
# `-o`：将排序好的结果输入到指定文件中，而不是直接打印到标准输出
----
===find：查找文件===

* 命令：`find`
* 格式：`find 查找路径 参数 目标字符串`，注意，查找路径必须放在最前面，目标字符串可使用通配符`*`、`?`、`[]`

按文件名查找

# `-name`：查找普通文件
# `-lname`：查找符号连接文件

按归属查找

# `-gid 编号`：查找指定用户组的所有文件
# `-uid 编号`：查找指定用户的所有文件
# `-group`：查找组名为目标字符串的所有文件
# `-user`：查找用户名为目标字符串的所有文件

按属性查找

# `-empty`：查找大小为`0`的目录或文件
# `-size 数字`：查找指定大小的文件，单位默认为`b`，代表`512`字节的块
# `-type 类型`：查找指定类型的文件，类型有`d`（目录）、`f`（普通文件）、`l`（符号连接文件）、`s`（`socket`）文件

按分钟查找

# `-amin 数字`：指定分钟数以前被访问过的所有文件
# `-cmin 数字`：指定分钟数以前文件状态被修改过的所有文件
# `-mmin 数字`：指定分钟数以前文件内容被修改过的所有文件

按天数查找

# `-atime 数字`：指定天数以前被访问过的所有文件
# `-ctime 数字`：指定天数以前文件状态被修改过的所有文件
# `-mtime 数字`：指定天数以前文件内容被修改过的所有文件
----
===awk：处理文件===

* 命令：`awk`
* 格式：`awk '{要查找的内容 找到匹配项时执行的命令}' 目标文件名`

事实上`awk`是一个微型语言，其自身拥有完善的语法

对`awk`而言，文本的每一行是一个记录，每一个记录由若干字段组成，默认的字段分隔符是空格和制表符

特殊变量`$0`代表整条记录，这条记录的所有字段依次命名为`$1`、`$2`、`$3`...

`awk`每处理完一行就自动进入下一行开始处理，找不到匹配内容也自动转入下一行

示例如下

`awk '{print $1}' abc.txt`：打印文件`abc.txt`所有行的第`1`个字段
----
<red>date</red> : 2011-08-16、2012-08-17合并整理
----
