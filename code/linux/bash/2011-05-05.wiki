%title Bash编程基础1

[[../../../index|首页]] - [[../index|Linux]] - [[index|Bash]]
==Bash编程基础1==
----
===变量===
BASH包含两种变量，一种为临时变量，一种为不随执行结束而消失的永久变量，如`$PATH`、`$SHELL`<br>
允许使用花括号将变量名包围起来，如：`${name}`

给变量赋值时不需要使用`$`符，但调用变量时需要有`$`，且等号两边不能有空格，这也是BASH和其他编程语言最不同的地方。如：`a=2 b=$a`<br>
用反引号引起来的是系统命令，如：`a=```date``，将执行date命令后的结果赋给变量a

`特别注意`：`Bash`语法比较诡异，等于号两边不能有空格，否则出错<br>
会有以上反常约束的原因是：`Bash`的变量在赋值符号右侧没有任何内容或者仅仅只有声明的情况下，也会被默认为一个空字符串

当变量值不止一个单词时，可以使用单引号或双引号，如：<br>
`name='Rui qi'`、`name="Rui Qi"`<br>
和PHP一样，双引号可以引用变量值，而单引号不能引用

使用`set`命令可以查看系统环境变量的设置情况，而使用`unset`可以删除变量<br>
如：`unset name`

====位置变量====
`$0`代表命令名，`$n`依次代表命令后面所跟的参数，其中`n`可取1到9

====特殊变量====
`$*`：这个程序的所有参数<br>
`$#`：这个程序的参数个数<br>
`$$`：这个程序的PID<br>
`$!`：执行上一条后台命令的PID<br>
`$?`：执行上一条命令的返回值，执行成功返回0，不成功返回非零值

可以写下面的shell脚本来检验，保存为`test.sh`：
{{{
<pre class="brush: bash;">
#!/bin/sh

echo '$* is : ' $* 		# 输出参数列表
echo '$# is : ' $# 		# 输出参数个数
echo '$$ is : ' $$ 		# 显示执行PID
echo '$? is : ' $? 		# 返回是否执行成功的标识
echo '$0 is : ' $0 		# 输出程序名
echo '$1 is : ' $1 		# 输出第一个参数
echo '$2 is : ' $2 		# 输出第二个参数
echo '$3 is : ' $3 		# 输出第三个参数
</pre>
}}}
执行`sh test.sh file1 file2 file3`后可能的输出结果为（因为PID值每次执行都有可能不一样）：
{{{
$* is : file1 file2 file3
$# is : 3
$$ is : 1628
$? is : 0
$0 is : test.sh
$1 is : file1
$2 is : file2
$3 is : file3
}}}
----
以`sh -x test.sh` 的形式可以步进执行，相当好的一个调试工具

使用`read a b c`的形式可以依次读入键盘输入的值，然后赋给相应的变量

使用`expr 3 + 5`的形式可以进行数值计算，可以直接在数值间计算，也可以在变量值间计算。要注意的是，运算符两侧的空格一定要有<br>
进行乘法运算时需要用转义字符，不然会出现语法错误：`expr 3 \* 5`，因为`*`号在shell里面具有特殊作用<br>
可以用反引号改变正常的计算顺序：`expr ``expr```2 + 3```/ $a`，这样就会先计算`2 + 3`，再用`2 + 3` 的值除以变量a的值<br>
还可以借助反引号来进行赋值：`var3 = ```expr $var1 + $var2``

BASH也支持直接计算，只是书写格式较其他语言而言稍显繁琐<br>
相加：`sum=$((3 + 2))`<br>
求余：`mod=$((3 % 2))`<br>
相乘：`mul=$((3 * 2))`  （注意：此处乘号不需要转义，否则反而出错）

赋值语句中，运算符两侧不能有空格：<br>
`$a=$a+1`：正确  -->  本语句可以写为：`a=$(($a + 1))`<br>
`$a=$a + 1`：错误
===变量测试语句===
====字符串测试====
`test str1=str2`：测试字符串是否相等<br>
`test str1!=str2`：测试字符串是否不相等<br>
`test str1`：测试字符串是否不为空<br>
`test -n str1`：测试字符串是否不为空<br>
`test -z str`：测试字符串是否为空

====数值测试====
`test int1 -eq int2`：测试整数是否相等<br>
`test int1 -ne int2`：测试整数是否不相等<br>
`test int1 -ge int2`：测试int1是否 >= int2<br>
`test int1 -gt int2`：测试int1是否 > int2<br>
`test int1 -le int2`：测试int1是否 <= int2<br>
`test int1 -lt int2`：测试int1是否 < int2

====文件测试====
`test -d file`：是否是目录<br>
`test -f file`：是否是常规文件<br>
`test -x file`：是否是可执行文件<br>
`test -r file`：是否可读<br>
`test -w file`：是否可写<br>
`test -a file`：是否存在<br>
`test -s file`：文件大小是否非0

test测试语句一般用作if语句的判断条件，这时候的test语句可以简化<br>
如：`test -d $a`可简写为`[ -d $a ]`，一定要注意的是，中括号两边要有空格，否则出错

===流程控制语句===
最简单的if-else结构：
{{{BASH
if ...
then
	....
else
	....
fi
}}}
稍复杂的if-else结构：
{{{BASH
if ...
then
	....
elif ...
then
	....
elif ...
then
	....
else
	....
fi
}}}
多条件联合：<br>
`-a`：逻辑与<br>
`-o`：逻辑或

`exit`语句退出执行，返回0表示执行成功，如：`exit 0`
----
<red>date</red> : 2011-05-05、2011-05-06、2011-09-20
----
