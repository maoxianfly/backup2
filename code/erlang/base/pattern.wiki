%title 模式匹配

[[../../../index|首页]] - [[../index|Erlang]] - [[index|Base]]
==模式匹配==
----
`Erlang`的模式匹配其实就是一套与变量赋值有关的规则，在其他语言里，变量赋值很简单，但由于`Erlang`的变量具有`单次赋值`的特点，所以规则不少

模式匹配的一般规则是，先计算`=`号右边的`表达式`，然后用它的值去与`=`号左边的`模式`进行比较

`Erlang`的`=`号本质是模式匹配的`比较`操作，而不是`赋值`操作
----
`Erlang`模式匹配的三大用途：

# 变量赋值
# 控制程序执行流程
# 从复合数据类型中进行数据的提取
----
如果在元组里多次出现同一个变量，那这些变量所处位置对应的值必须也相等。如 `{A, A, B} = {1, 1, 2}.`

对于列表，一个`[...|...]`形式的列表必须匹配一个非空列表。如 `[Head|Tail] = [1, 2, 3].`，结果`Head.`为`[1]`，`Tail.`为`[2, 3]`

无论元组或列表，左边的模式与右边的表达式，其元素个数必须相等。如 `{A, B, C} = {1, 2, 3}.`、`[A, B, C] = [1, 2, 3].`

尽管`[A, B, C, D] = [1, 2, 3].`会因为元素个数不相等而匹配失败，但`[A, B, C | D] = [1, 2, 3].`是可以匹配成功的，此时`D.`为空列表

使用`_`通配符可以略过某些不想匹配的值，如 `{A, B, _} = {1, 2, 3}.`
----
<red>date</red> : 2012-07-21
----
